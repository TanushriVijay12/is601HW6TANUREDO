# conftest.py
"""
This module contains fixtures and test data generation functions for pytest.
It generates test data for arithmetic operations like addition, subtraction, 
multiplication, and division. It also provides a custom pytest option to 
generate a specific number of test records.
"""

from decimal import Decimal
import pytest
from faker import Faker
from calculator.operations import add, subtract, multiply, divide

fake = Faker()

def generate_test_data(num_records):
    """
    Generates test data for arithmetic operations.

    This function creates test data by generating random values for 
    operands and operation types (add, subtract, multiply, divide). It 
    ensures the values are appropriate for the operations and avoids 
    division by zero errors.

    Args:
    - num_records (int): Number of test records to generate.

    Yields:
    - Tuple: (a, b, operation_name, operation_func, expected_result)
    """
    operation_mappings = {
        'add': add,
        'subtract': subtract,
        'multiply': multiply,
        'divide': divide
    }
    
    for _ in range(num_records):
        a = Decimal(fake.random_number(digits=2))
        b = Decimal(fake.random_number(digits=2)) if _ % 4 != 3 else Decimal(fake.random_number(digits=1))
        operation_name = fake.random_element(elements=list(operation_mappings.keys()))
        operation_func = operation_mappings[operation_name]
        
        if operation_func == divide and b == Decimal('0'):
            b = Decimal('1')  # Avoid division by zero

        try:
            # Perform the operation and handle division by zero
            if operation_func == divide and b == Decimal('0'):
                expected = "ZeroDivisionError"
            else:
                expected = operation_func(a, b)
        except ZeroDivisionError:
            expected = "ZeroDivisionError"
        
        yield a, b, operation_name, operation_func, expected

def pytest_addoption(parser):
    """
    Adds a command line option to pytest for specifying the number of test records.

    Args:
    - parser: The pytest parser to add the option to.
    """
    parser.addoption("--num_records", action="store", default=5, type=int, help="Number of test records to generate")

def pytest_generate_tests(metafunc):
    """
    Automatically generates test cases based on the dynamic test data generated by 
    `generate_test_data` function.

    Args:
    - metafunc: The pytest metafunc object that provides access to test function 
                parameters and fixtures.
    """
    # Check if the test is expecting any of the dynamically generated fixtures
    if {"a", "b", "expected"}.intersection(set(metafunc.fixturenames)):
        num_records = metafunc.config.getoption("num_records")
        parameters = list(generate_test_data(num_records))
        
        # Modify parameters to fit test functions' expectations
        modified_parameters = [
            (a, b, op_name if 'operation_name' in metafunc.fixturenames else op_func, expected)
            for a, b, op_name, op_func, expected in parameters
        ]
        metafunc.parametrize("a,b,operation,expected", modified_parameters)
